# Generated by Django 3.0.3 on 2020-08-15 05:33

import django.core.validators
from django.db import migrations, models
import django_resized.forms
import users.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=256, validators=[django.core.validators.RegexValidator(code='invalid_first_name', message='Name must be Alphabetic', regex='^[a-zA-Z ]*$')])),
                ('last_name', models.CharField(max_length=256, validators=[django.core.validators.RegexValidator(code='invalid_last_name', message='Name must be Alphabetic', regex='^[a-zA-Z ]*$')])),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Prefer not to say', 'Prefer not to say')], help_text='Select gender', max_length=25)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('balance', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('picture', django_resized.forms.ResizedImageField(crop=['top', 'left'], force_format='JPEG', keep_meta=True, null=True, quality=80, size=[128, 128], upload_to='media-root/')),
                ('is_staff', models.BooleanField(default=False, verbose_name='active')),
                ('email_confirmed', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', users.managers.UserManager()),
            ],
        ),
    ]
